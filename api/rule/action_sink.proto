syntax = "proto3";

package dto;

//action sink


service ActionSink {
    rpc Verify (ASVerifyReq) returns (ASVerifyResp);
    rpc GetTableFieldTypes (ASGetTableFieldTypesReq) returns (ASGetTableFieldTypesResp);
    rpc GenerateSql (ASGenerateSqlReq) returns (ASGenerateSqlResp);
    rpc TableCreate (ASTableCreateReq) returns (ASTableCreateResp);
    rpc GetTableDetails(ASGetTableDetailsReq) returns (ASGetTableDetailsResp);
    rpc TableList (ASTableListReq) returns (ASTableListResp);
    rpc GetTableMap (ASGetTableMapReq) returns (ASGetTableMapResp);
    rpc UpdateTableMap (ASUpdateTableMapReq) returns (ASUpdateTableMapResp);
}



message Field {
    string name =1;
    string type =2;
    bool isPK = 3;
}

message Table {
    string Name                 =1;
	string Sql                  =2;
	string Engine               =3;
	repeated string Partitions  =4;
	repeated string OrderBy     =5;
	string TTL                  =6;
    int64 IndexGranularity      =7;
    repeated Field fields       =8;
}

message MapField {
    Field t_field = 1;
    Field m_field = 2;
}


//verify.
message ASVerifyReq{
    string sink_type = 1;
    //delimiter : ';'
    bytes urls  = 2;
    string user_id = 3;
	//meta用于储存不同类型的特有信息，如chronus需要user，和password
	map<string, string> meta  =4;
}

message ASVerifyResp{
    string id = 1;
    repeated string types = 2;
}

message ASGetTableFieldTypesReq{
    string sink_type = 1;
    string user_id = 2;
}

message ASGetTableFieldTypesResp{
    repeated string types = 1;
}

message ASGenerateSqlReq {
    string id                   =1;
    string Name                 =2;
    string sink_type            =3;
    string user_id = 4;
	repeated string Partitions  =5;
    repeated Field fields       =8;
}

message ASGenerateSqlResp {
    string id                   = 1;
    string sql                  = 2;
}


//table create
message ASTableCreateReq {
    string id                   =1;
    string name                 =2;
    string sink_type            =3;
    string user_id = 4;
	repeated string Partitions  =5;
    repeated Field fields       =8;
}

message ASTableCreateResp {
    string id                   = 1;
    string sql                  = 2;
}

//table list
message ASTableListReq{
    string id = 1;
    string sink_type =2;
    string user_id  = 3;
}

message ASTableListResp{
    repeated Table tables = 1;
}

//get table map
message ASGetTableMapReq{
    string table_name =1;
    string action_id = 2;
    string user_id = 3;
}

message ASGetTableMapResp {
    string table_name = 1;
    string action_id = 2;
    repeated Field table_fields = 3;
    repeated MapField map_fields = 4;
}


//update table map.
message ASUpdateTableMapReq{
    string table_name = 1;
    string action_id = 2;
    string sink_id = 3;
    string user_id = 4;
    repeated MapField fields = 5;
}

message ASUpdateTableMapResp{
    string table_name = 1;
    string action_id = 2;
    string sink_id = 3;
    repeated MapField fields = 4;
}



//get table details.
message ASGetTableDetailsReq{
    string sink_id = 1;
    string table_name = 2;
    string sink_type = 3;
    string user_id = 4;
}

message ASGetTableDetailsResp {
    Table table = 1;
}


