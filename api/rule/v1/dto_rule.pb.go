// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: api/rule/v1/dto_rule.proto

package v1

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Rule create.
type RuleCreateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc      string `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Type      uint32 `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`
	ModelId   string `protobuf:"bytes,4,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelName string `protobuf:"bytes,5,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (x *RuleCreateReq) Reset() {
	*x = RuleCreateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleCreateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleCreateReq) ProtoMessage() {}

func (x *RuleCreateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleCreateReq.ProtoReflect.Descriptor instead.
func (*RuleCreateReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{0}
}

func (x *RuleCreateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuleCreateReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *RuleCreateReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RuleCreateReq) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *RuleCreateReq) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type RuleCreateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc      string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Type      uint32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Status    uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ModelId   string `protobuf:"bytes,8,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelName string `protobuf:"bytes,9,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (x *RuleCreateResp) Reset() {
	*x = RuleCreateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleCreateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleCreateResp) ProtoMessage() {}

func (x *RuleCreateResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleCreateResp.ProtoReflect.Descriptor instead.
func (*RuleCreateResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{1}
}

func (x *RuleCreateResp) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RuleCreateResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuleCreateResp) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *RuleCreateResp) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RuleCreateResp) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RuleCreateResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RuleCreateResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *RuleCreateResp) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *RuleCreateResp) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc          string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Type          uint32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Status        uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt     int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt     int64  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	DevicesStatus uint32 `protobuf:"varint,8,opt,name=devices_status,json=devicesStatus,proto3" json:"devices_status,omitempty"`
	TargetsStatus uint32 `protobuf:"varint,9,opt,name=targets_status,json=targetsStatus,proto3" json:"targets_status,omitempty"`
	SubId         uint32 `protobuf:"varint,10,opt,name=sub_id,json=subId,proto3" json:"sub_id,omitempty"`
	ModelId       string `protobuf:"bytes,11,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelName     string `protobuf:"bytes,12,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{2}
}

func (x *Rule) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Rule) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rule) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Rule) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Rule) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *Rule) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Rule) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Rule) GetDevicesStatus() uint32 {
	if x != nil {
		return x.DevicesStatus
	}
	return 0
}

func (x *Rule) GetTargetsStatus() uint32 {
	if x != nil {
		return x.TargetsStatus
	}
	return 0
}

func (x *Rule) GetSubId() uint32 {
	if x != nil {
		return x.SubId
	}
	return 0
}

func (x *Rule) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *Rule) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

// rule update
type RuleUpdateReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *RuleUpdateReq) Reset() {
	*x = RuleUpdateReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleUpdateReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleUpdateReq) ProtoMessage() {}

func (x *RuleUpdateReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleUpdateReq.ProtoReflect.Descriptor instead.
func (*RuleUpdateReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{3}
}

func (x *RuleUpdateReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RuleUpdateReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuleUpdateReq) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type RuleUpdateResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc      string `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	Type      uint32 `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Status    uint32 `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt int64  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ModelId   string `protobuf:"bytes,8,opt,name=model_id,json=modelId,proto3" json:"model_id,omitempty"`
	ModelName string `protobuf:"bytes,9,opt,name=model_name,json=modelName,proto3" json:"model_name,omitempty"`
}

func (x *RuleUpdateResp) Reset() {
	*x = RuleUpdateResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleUpdateResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleUpdateResp) ProtoMessage() {}

func (x *RuleUpdateResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleUpdateResp.ProtoReflect.Descriptor instead.
func (*RuleUpdateResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{4}
}

func (x *RuleUpdateResp) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RuleUpdateResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuleUpdateResp) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *RuleUpdateResp) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RuleUpdateResp) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *RuleUpdateResp) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *RuleUpdateResp) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *RuleUpdateResp) GetModelId() string {
	if x != nil {
		return x.ModelId
	}
	return ""
}

func (x *RuleUpdateResp) GetModelName() string {
	if x != nil {
		return x.ModelName
	}
	return ""
}

// rule delete.
type RuleDeleteReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RuleDeleteReq) Reset() {
	*x = RuleDeleteReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleDeleteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDeleteReq) ProtoMessage() {}

func (x *RuleDeleteReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDeleteReq.ProtoReflect.Descriptor instead.
func (*RuleDeleteReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{5}
}

func (x *RuleDeleteReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// rule delete.
type RuleGetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RuleGetReq) Reset() {
	*x = RuleGetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleGetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleGetReq) ProtoMessage() {}

func (x *RuleGetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleGetReq.ProtoReflect.Descriptor instead.
func (*RuleGetReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{6}
}

func (x *RuleGetReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// rule query
type RuleQueryReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      uint32   `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     uint32   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderBy      string   `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	IsDescending bool     `protobuf:"varint,4,opt,name=is_descending,json=isDescending,proto3" json:"is_descending,omitempty"`
	KeyWords     string   `protobuf:"bytes,5,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	SearchKey    string   `protobuf:"bytes,6,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
	Id           *Uint64  `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	Ids          []string `protobuf:"bytes,8,rep,name=ids,proto3" json:"ids,omitempty"`
	Name         *String  `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Type         uint32   `protobuf:"varint,10,opt,name=type,proto3" json:"type,omitempty"`
	Status       *Uint32  `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RuleQueryReq) Reset() {
	*x = RuleQueryReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleQueryReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleQueryReq) ProtoMessage() {}

func (x *RuleQueryReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleQueryReq.ProtoReflect.Descriptor instead.
func (*RuleQueryReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{7}
}

func (x *RuleQueryReq) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RuleQueryReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RuleQueryReq) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *RuleQueryReq) GetIsDescending() bool {
	if x != nil {
		return x.IsDescending
	}
	return false
}

func (x *RuleQueryReq) GetKeyWords() string {
	if x != nil {
		return x.KeyWords
	}
	return ""
}

func (x *RuleQueryReq) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *RuleQueryReq) GetId() *Uint64 {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RuleQueryReq) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *RuleQueryReq) GetName() *String {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *RuleQueryReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RuleQueryReq) GetStatus() *Uint32 {
	if x != nil {
		return x.Status
	}
	return nil
}

type RuleQueryResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    uint32  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	PageNum  uint32  `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	LastPage uint32  `protobuf:"varint,3,opt,name=last_page,json=lastPage,proto3" json:"last_page,omitempty"`
	PageSize uint32  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Data     []*Rule `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RuleQueryResp) Reset() {
	*x = RuleQueryResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleQueryResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleQueryResp) ProtoMessage() {}

func (x *RuleQueryResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleQueryResp.ProtoReflect.Descriptor instead.
func (*RuleQueryResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{8}
}

func (x *RuleQueryResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RuleQueryResp) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RuleQueryResp) GetLastPage() uint32 {
	if x != nil {
		return x.LastPage
	}
	return 0
}

func (x *RuleQueryResp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RuleQueryResp) GetData() []*Rule {
	if x != nil {
		return x.Data
	}
	return nil
}

type RuleStatusSwitchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RuleStatusSwitchReq) Reset() {
	*x = RuleStatusSwitchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleStatusSwitchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleStatusSwitchReq) ProtoMessage() {}

func (x *RuleStatusSwitchReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleStatusSwitchReq.ProtoReflect.Descriptor instead.
func (*RuleStatusSwitchReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{9}
}

func (x *RuleStatusSwitchReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RuleStatusSwitchReq) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type RuleStatusSwitchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status uint32 `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *RuleStatusSwitchResp) Reset() {
	*x = RuleStatusSwitchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleStatusSwitchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleStatusSwitchResp) ProtoMessage() {}

func (x *RuleStatusSwitchResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleStatusSwitchResp.ProtoReflect.Descriptor instead.
func (*RuleStatusSwitchResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{10}
}

func (x *RuleStatusSwitchResp) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RuleStatusSwitchResp) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

type RuleDevicesIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RuleDevicesIDReq) Reset() {
	*x = RuleDevicesIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleDevicesIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDevicesIDReq) ProtoMessage() {}

func (x *RuleDevicesIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDevicesIDReq.ProtoReflect.Descriptor instead.
func (*RuleDevicesIDReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{11}
}

func (x *RuleDevicesIDReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RuleDevicesIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevicesIds []string `protobuf:"bytes,1,rep,name=devices_ids,json=devicesIds,proto3" json:"devices_ids,omitempty"`
}

func (x *RuleDevicesIDResp) Reset() {
	*x = RuleDevicesIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleDevicesIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDevicesIDResp) ProtoMessage() {}

func (x *RuleDevicesIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDevicesIDResp.ProtoReflect.Descriptor instead.
func (*RuleDevicesIDResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{12}
}

func (x *RuleDevicesIDResp) GetDevicesIds() []string {
	if x != nil {
		return x.DevicesIds
	}
	return nil
}

type RuleDevicesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      uint32 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderBy      string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	IsDescending bool   `protobuf:"varint,4,opt,name=is_descending,json=isDescending,proto3" json:"is_descending,omitempty"`
	KeyWords     string `protobuf:"bytes,5,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	SearchKey    string `protobuf:"bytes,6,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
	Id           uint64 `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RuleDevicesReq) Reset() {
	*x = RuleDevicesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleDevicesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDevicesReq) ProtoMessage() {}

func (x *RuleDevicesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDevicesReq.ProtoReflect.Descriptor instead.
func (*RuleDevicesReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{13}
}

func (x *RuleDevicesReq) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RuleDevicesReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RuleDevicesReq) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *RuleDevicesReq) GetIsDescending() bool {
	if x != nil {
		return x.IsDescending
	}
	return false
}

func (x *RuleDevicesReq) GetKeyWords() string {
	if x != nil {
		return x.KeyWords
	}
	return ""
}

func (x *RuleDevicesReq) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *RuleDevicesReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type RuleDevicesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    uint32    `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	PageNum  uint32    `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	LastPage uint32    `protobuf:"varint,3,opt,name=last_page,json=lastPage,proto3" json:"last_page,omitempty"`
	PageSize uint32    `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Data     []*Device `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *RuleDevicesResp) Reset() {
	*x = RuleDevicesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuleDevicesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleDevicesResp) ProtoMessage() {}

func (x *RuleDevicesResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleDevicesResp.ProtoReflect.Descriptor instead.
func (*RuleDevicesResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{14}
}

func (x *RuleDevicesResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RuleDevicesResp) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *RuleDevicesResp) GetLastPage() uint32 {
	if x != nil {
		return x.LastPage
	}
	return 0
}

func (x *RuleDevicesResp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RuleDevicesResp) GetData() []*Device {
	if x != nil {
		return x.Data
	}
	return nil
}

type AddDevicesToRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DevicesIds []string `protobuf:"bytes,2,rep,name=devices_ids,json=devicesIds,proto3" json:"devices_ids,omitempty"`
}

func (x *AddDevicesToRuleReq) Reset() {
	*x = AddDevicesToRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDevicesToRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDevicesToRuleReq) ProtoMessage() {}

func (x *AddDevicesToRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDevicesToRuleReq.ProtoReflect.Descriptor instead.
func (*AddDevicesToRuleReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{15}
}

func (x *AddDevicesToRuleReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *AddDevicesToRuleReq) GetDevicesIds() []string {
	if x != nil {
		return x.DevicesIds
	}
	return nil
}

type RemoveDevicesFromRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	DevicesIds string `protobuf:"bytes,2,opt,name=devices_ids,json=devicesIds,proto3" json:"devices_ids,omitempty"`
}

func (x *RemoveDevicesFromRuleReq) Reset() {
	*x = RemoveDevicesFromRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDevicesFromRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDevicesFromRuleReq) ProtoMessage() {}

func (x *RemoveDevicesFromRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDevicesFromRuleReq.ProtoReflect.Descriptor instead.
func (*RemoveDevicesFromRuleReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{16}
}

func (x *RemoveDevicesFromRuleReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RemoveDevicesFromRuleReq) GetDevicesIds() string {
	if x != nil {
		return x.DevicesIds
	}
	return ""
}

type RemoveDeviceFromAllRuleReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RemoveDeviceFromAllRuleReq) Reset() {
	*x = RemoveDeviceFromAllRuleReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDeviceFromAllRuleReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDeviceFromAllRuleReq) ProtoMessage() {}

func (x *RemoveDeviceFromAllRuleReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDeviceFromAllRuleReq.ProtoReflect.Descriptor instead.
func (*RemoveDeviceFromAllRuleReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{17}
}

func (x *RemoveDeviceFromAllRuleReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Template  string `protobuf:"bytes,3,opt,name=template,proto3" json:"template,omitempty"`
	GroupName string `protobuf:"bytes,4,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Status    string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{18}
}

func (x *Device) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetTemplate() string {
	if x != nil {
		return x.Template
	}
	return ""
}

func (x *Device) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *Device) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type CreateRuleTargetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Host  string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// string ext = 5;
	TableName string            `protobuf:"bytes,5,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	SinkType  string            `protobuf:"bytes,6,opt,name=sink_type,json=sinkType,proto3" json:"sink_type,omitempty"`
	SinkId    string            `protobuf:"bytes,7,opt,name=sink_id,json=sinkId,proto3" json:"sink_id,omitempty"`
	Fields    []*MapField       `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
	Tags      map[string]string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateRuleTargetReq) Reset() {
	*x = CreateRuleTargetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRuleTargetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRuleTargetReq) ProtoMessage() {}

func (x *CreateRuleTargetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRuleTargetReq.ProtoReflect.Descriptor instead.
func (*CreateRuleTargetReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{19}
}

func (x *CreateRuleTargetReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateRuleTargetReq) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateRuleTargetReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CreateRuleTargetReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CreateRuleTargetReq) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *CreateRuleTargetReq) GetSinkType() string {
	if x != nil {
		return x.SinkType
	}
	return ""
}

func (x *CreateRuleTargetReq) GetSinkId() string {
	if x != nil {
		return x.SinkId
	}
	return ""
}

func (x *CreateRuleTargetReq) GetFields() []*MapField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CreateRuleTargetReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type CreateRuleTargetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  uint32 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Host  string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// string ext = 5;
	TableName string            `protobuf:"bytes,5,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	SinkType  string            `protobuf:"bytes,6,opt,name=sink_type,json=sinkType,proto3" json:"sink_type,omitempty"`
	SinkId    string            `protobuf:"bytes,7,opt,name=sink_id,json=sinkId,proto3" json:"sink_id,omitempty"`
	Fields    []*MapField       `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
	User      string            `protobuf:"bytes,9,opt,name=user,proto3" json:"user,omitempty"`
	Password  string            `protobuf:"bytes,10,opt,name=password,proto3" json:"password,omitempty"`
	Database  string            `protobuf:"bytes,11,opt,name=database,proto3" json:"database,omitempty"`
	Endpoint  string            `protobuf:"bytes,12,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Tags      map[string]string `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CreateRuleTargetResp) Reset() {
	*x = CreateRuleTargetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRuleTargetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRuleTargetResp) ProtoMessage() {}

func (x *CreateRuleTargetResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRuleTargetResp.ProtoReflect.Descriptor instead.
func (*CreateRuleTargetResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{20}
}

func (x *CreateRuleTargetResp) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CreateRuleTargetResp) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateRuleTargetResp) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CreateRuleTargetResp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *CreateRuleTargetResp) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *CreateRuleTargetResp) GetSinkType() string {
	if x != nil {
		return x.SinkType
	}
	return ""
}

func (x *CreateRuleTargetResp) GetSinkId() string {
	if x != nil {
		return x.SinkId
	}
	return ""
}

func (x *CreateRuleTargetResp) GetFields() []*MapField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *CreateRuleTargetResp) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CreateRuleTargetResp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *CreateRuleTargetResp) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *CreateRuleTargetResp) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *CreateRuleTargetResp) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateRuleTargetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TargetId uint64 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	Host     string `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Value    string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// string ext = 5;
	SinkType string            `protobuf:"bytes,6,opt,name=sink_type,json=sinkType,proto3" json:"sink_type,omitempty"`
	SinkId   string            `protobuf:"bytes,7,opt,name=sink_id,json=sinkId,proto3" json:"sink_id,omitempty"`
	Tags     map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateRuleTargetReq) Reset() {
	*x = UpdateRuleTargetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRuleTargetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRuleTargetReq) ProtoMessage() {}

func (x *UpdateRuleTargetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRuleTargetReq.ProtoReflect.Descriptor instead.
func (*UpdateRuleTargetReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateRuleTargetReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRuleTargetReq) GetTargetId() uint64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *UpdateRuleTargetReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *UpdateRuleTargetReq) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateRuleTargetReq) GetSinkType() string {
	if x != nil {
		return x.SinkType
	}
	return ""
}

func (x *UpdateRuleTargetReq) GetSinkId() string {
	if x != nil {
		return x.SinkId
	}
	return ""
}

func (x *UpdateRuleTargetReq) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type UpdateRuleTargetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type     uint32            `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Host     string            `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	Value    string            `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	SinkType string            `protobuf:"bytes,6,opt,name=sink_type,json=sinkType,proto3" json:"sink_type,omitempty"`
	SinkId   string            `protobuf:"bytes,7,opt,name=sink_id,json=sinkId,proto3" json:"sink_id,omitempty"`
	Fields   []*MapField       `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
	Tags     map[string]string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *UpdateRuleTargetResp) Reset() {
	*x = UpdateRuleTargetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRuleTargetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRuleTargetResp) ProtoMessage() {}

func (x *UpdateRuleTargetResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRuleTargetResp.ProtoReflect.Descriptor instead.
func (*UpdateRuleTargetResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateRuleTargetResp) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateRuleTargetResp) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UpdateRuleTargetResp) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *UpdateRuleTargetResp) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateRuleTargetResp) GetSinkType() string {
	if x != nil {
		return x.SinkType
	}
	return ""
}

func (x *UpdateRuleTargetResp) GetSinkId() string {
	if x != nil {
		return x.SinkId
	}
	return ""
}

func (x *UpdateRuleTargetResp) GetFields() []*MapField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *UpdateRuleTargetResp) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type TestConnectToKafkaReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host  string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *TestConnectToKafkaReq) Reset() {
	*x = TestConnectToKafkaReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestConnectToKafkaReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestConnectToKafkaReq) ProtoMessage() {}

func (x *TestConnectToKafkaReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestConnectToKafkaReq.ProtoReflect.Descriptor instead.
func (*TestConnectToKafkaReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{23}
}

func (x *TestConnectToKafkaReq) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *TestConnectToKafkaReq) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// verify.
type ASVerifyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SinkType string            `protobuf:"bytes,1,opt,name=sink_type,json=sinkType,proto3" json:"sink_type,omitempty"`
	Urls     string            `protobuf:"bytes,2,opt,name=urls,proto3" json:"urls,omitempty"`
	Meta     map[string]string `protobuf:"bytes,4,rep,name=meta,proto3" json:"meta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ASVerifyReq) Reset() {
	*x = ASVerifyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASVerifyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASVerifyReq) ProtoMessage() {}

func (x *ASVerifyReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASVerifyReq.ProtoReflect.Descriptor instead.
func (*ASVerifyReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{24}
}

func (x *ASVerifyReq) GetSinkType() string {
	if x != nil {
		return x.SinkType
	}
	return ""
}

func (x *ASVerifyReq) GetUrls() string {
	if x != nil {
		return x.Urls
	}
	return ""
}

func (x *ASVerifyReq) GetMeta() map[string]string {
	if x != nil {
		return x.Meta
	}
	return nil
}

type ASVerifyResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Types []string `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *ASVerifyResp) Reset() {
	*x = ASVerifyResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASVerifyResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASVerifyResp) ProtoMessage() {}

func (x *ASVerifyResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASVerifyResp.ProtoReflect.Descriptor instead.
func (*ASVerifyResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{25}
}

func (x *ASVerifyResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ASVerifyResp) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

type ListRuleTargetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageNum      uint32 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	PageSize     uint32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	OrderBy      string `protobuf:"bytes,3,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	IsDescending bool   `protobuf:"varint,4,opt,name=is_descending,json=isDescending,proto3" json:"is_descending,omitempty"`
	KeyWords     string `protobuf:"bytes,5,opt,name=key_words,json=keyWords,proto3" json:"key_words,omitempty"`
	SearchKey    string `protobuf:"bytes,6,opt,name=search_key,json=searchKey,proto3" json:"search_key,omitempty"`
	Id           uint64 `protobuf:"varint,7,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ListRuleTargetReq) Reset() {
	*x = ListRuleTargetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRuleTargetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleTargetReq) ProtoMessage() {}

func (x *ListRuleTargetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleTargetReq.ProtoReflect.Descriptor instead.
func (*ListRuleTargetReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{26}
}

func (x *ListRuleTargetReq) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListRuleTargetReq) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRuleTargetReq) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListRuleTargetReq) GetIsDescending() bool {
	if x != nil {
		return x.IsDescending
	}
	return false
}

func (x *ListRuleTargetReq) GetKeyWords() string {
	if x != nil {
		return x.KeyWords
	}
	return ""
}

func (x *ListRuleTargetReq) GetSearchKey() string {
	if x != nil {
		return x.SearchKey
	}
	return ""
}

func (x *ListRuleTargetReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListRuleTargetResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total    uint32                  `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	PageNum  uint32                  `protobuf:"varint,2,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	LastPage uint32                  `protobuf:"varint,3,opt,name=last_page,json=lastPage,proto3" json:"last_page,omitempty"`
	PageSize uint32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	Data     []*CreateRuleTargetResp `protobuf:"bytes,5,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ListRuleTargetResp) Reset() {
	*x = ListRuleTargetResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRuleTargetResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRuleTargetResp) ProtoMessage() {}

func (x *ListRuleTargetResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRuleTargetResp.ProtoReflect.Descriptor instead.
func (*ListRuleTargetResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{27}
}

func (x *ListRuleTargetResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListRuleTargetResp) GetPageNum() uint32 {
	if x != nil {
		return x.PageNum
	}
	return 0
}

func (x *ListRuleTargetResp) GetLastPage() uint32 {
	if x != nil {
		return x.LastPage
	}
	return 0
}

func (x *ListRuleTargetResp) GetPageSize() uint32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRuleTargetResp) GetData() []*CreateRuleTargetResp {
	if x != nil {
		return x.Data
	}
	return nil
}

type DeleteRuleTargetReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	TargetId uint64 `protobuf:"varint,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
}

func (x *DeleteRuleTargetReq) Reset() {
	*x = DeleteRuleTargetReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRuleTargetReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRuleTargetReq) ProtoMessage() {}

func (x *DeleteRuleTargetReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRuleTargetReq.ProtoReflect.Descriptor instead.
func (*DeleteRuleTargetReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{28}
}

func (x *DeleteRuleTargetReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *DeleteRuleTargetReq) GetTargetId() uint64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

type ErrSubscribeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SubscribeId string `protobuf:"bytes,2,opt,name=subscribe_id,json=subscribeId,proto3" json:"subscribe_id,omitempty"`
}

func (x *ErrSubscribeReq) Reset() {
	*x = ErrSubscribeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrSubscribeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrSubscribeReq) ProtoMessage() {}

func (x *ErrSubscribeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrSubscribeReq.ProtoReflect.Descriptor instead.
func (*ErrSubscribeReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{29}
}

func (x *ErrSubscribeReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ErrSubscribeReq) GetSubscribeId() string {
	if x != nil {
		return x.SubscribeId
	}
	return ""
}

type ChangeErrSubscribeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SubscribeId string `protobuf:"bytes,2,opt,name=subscribe_id,json=subscribeId,proto3" json:"subscribe_id,omitempty"`
}

func (x *ChangeErrSubscribeReq) Reset() {
	*x = ChangeErrSubscribeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeErrSubscribeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeErrSubscribeReq) ProtoMessage() {}

func (x *ChangeErrSubscribeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeErrSubscribeReq.ProtoReflect.Descriptor instead.
func (*ChangeErrSubscribeReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{30}
}

func (x *ChangeErrSubscribeReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChangeErrSubscribeReq) GetSubscribeId() string {
	if x != nil {
		return x.SubscribeId
	}
	return ""
}

type ErrUnsubscribeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ErrUnsubscribeReq) Reset() {
	*x = ErrUnsubscribeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrUnsubscribeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrUnsubscribeReq) ProtoMessage() {}

func (x *ErrUnsubscribeReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrUnsubscribeReq.ProtoReflect.Descriptor instead.
func (*ErrUnsubscribeReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{31}
}

func (x *ErrUnsubscribeReq) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	IsPK bool   `protobuf:"varint,3,opt,name=isPK,proto3" json:"isPK,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{32}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Field) GetIsPK() bool {
	if x != nil {
		return x.IsPK
	}
	return false
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Fields []*Field `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{33}
}

func (x *Table) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Table) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type MapField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TField *Field `protobuf:"bytes,1,opt,name=t_field,json=tField,proto3" json:"t_field,omitempty"`
	MField *Field `protobuf:"bytes,2,opt,name=m_field,json=mField,proto3" json:"m_field,omitempty"`
}

func (x *MapField) Reset() {
	*x = MapField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapField) ProtoMessage() {}

func (x *MapField) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapField.ProtoReflect.Descriptor instead.
func (*MapField) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{34}
}

func (x *MapField) GetTField() *Field {
	if x != nil {
		return x.TField
	}
	return nil
}

func (x *MapField) GetMField() *Field {
	if x != nil {
		return x.MField
	}
	return nil
}

// table list
type ASTableListReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ASTableListReq) Reset() {
	*x = ASTableListReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTableListReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTableListReq) ProtoMessage() {}

func (x *ASTableListReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTableListReq.ProtoReflect.Descriptor instead.
func (*ASTableListReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{35}
}

func (x *ASTableListReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ASTableListResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tables []*Table `protobuf:"bytes,1,rep,name=tables,proto3" json:"tables,omitempty"`
}

func (x *ASTableListResp) Reset() {
	*x = ASTableListResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASTableListResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASTableListResp) ProtoMessage() {}

func (x *ASTableListResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASTableListResp.ProtoReflect.Descriptor instead.
func (*ASTableListResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{36}
}

func (x *ASTableListResp) GetTables() []*Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

// get table map
type ASGetTableMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableName string `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *ASGetTableMapReq) Reset() {
	*x = ASGetTableMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASGetTableMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASGetTableMapReq) ProtoMessage() {}

func (x *ASGetTableMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASGetTableMapReq.ProtoReflect.Descriptor instead.
func (*ASGetTableMapReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{37}
}

func (x *ASGetTableMapReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ASGetTableMapReq) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type ASGetTableMapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableName   string      `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	TableFields []*Field    `protobuf:"bytes,3,rep,name=table_fields,json=tableFields,proto3" json:"table_fields,omitempty"`
	MapFields   []*MapField `protobuf:"bytes,4,rep,name=map_fields,json=mapFields,proto3" json:"map_fields,omitempty"`
}

func (x *ASGetTableMapResp) Reset() {
	*x = ASGetTableMapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASGetTableMapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASGetTableMapResp) ProtoMessage() {}

func (x *ASGetTableMapResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASGetTableMapResp.ProtoReflect.Descriptor instead.
func (*ASGetTableMapResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{38}
}

func (x *ASGetTableMapResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ASGetTableMapResp) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ASGetTableMapResp) GetTableFields() []*Field {
	if x != nil {
		return x.TableFields
	}
	return nil
}

func (x *ASGetTableMapResp) GetMapFields() []*MapField {
	if x != nil {
		return x.MapFields
	}
	return nil
}

// update table map.
type ASUpdateTableMapReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TargetId  string      `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TableName string      `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Fields    []*MapField `protobuf:"bytes,5,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ASUpdateTableMapReq) Reset() {
	*x = ASUpdateTableMapReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASUpdateTableMapReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASUpdateTableMapReq) ProtoMessage() {}

func (x *ASUpdateTableMapReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASUpdateTableMapReq.ProtoReflect.Descriptor instead.
func (*ASUpdateTableMapReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{39}
}

func (x *ASUpdateTableMapReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ASUpdateTableMapReq) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *ASUpdateTableMapReq) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ASUpdateTableMapReq) GetFields() []*MapField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ASUpdateTableMapResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TargetId  string      `protobuf:"bytes,2,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	TableName string      `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	Fields    []*MapField `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *ASUpdateTableMapResp) Reset() {
	*x = ASUpdateTableMapResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASUpdateTableMapResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASUpdateTableMapResp) ProtoMessage() {}

func (x *ASUpdateTableMapResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASUpdateTableMapResp.ProtoReflect.Descriptor instead.
func (*ASUpdateTableMapResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{40}
}

func (x *ASUpdateTableMapResp) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ASUpdateTableMapResp) GetTargetId() string {
	if x != nil {
		return x.TargetId
	}
	return ""
}

func (x *ASUpdateTableMapResp) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *ASUpdateTableMapResp) GetFields() []*MapField {
	if x != nil {
		return x.Fields
	}
	return nil
}

// get table details.
type ASGetTableDetailsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	TableName string `protobuf:"bytes,3,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *ASGetTableDetailsReq) Reset() {
	*x = ASGetTableDetailsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASGetTableDetailsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASGetTableDetailsReq) ProtoMessage() {}

func (x *ASGetTableDetailsReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASGetTableDetailsReq.ProtoReflect.Descriptor instead.
func (*ASGetTableDetailsReq) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{41}
}

func (x *ASGetTableDetailsReq) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ASGetTableDetailsReq) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type ASGetTableDetailsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table *Table `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *ASGetTableDetailsResp) Reset() {
	*x = ASGetTableDetailsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_rule_v1_dto_rule_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ASGetTableDetailsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ASGetTableDetailsResp) ProtoMessage() {}

func (x *ASGetTableDetailsResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_rule_v1_dto_rule_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ASGetTableDetailsResp.ProtoReflect.Descriptor instead.
func (*ASGetTableDetailsResp) Descriptor() ([]byte, []int) {
	return file_api_rule_v1_dto_rule_proto_rawDescGZIP(), []int{42}
}

func (x *ASGetTableDetailsResp) GetTable() *Table {
	if x != nil {
		return x.Table
	}
	return nil
}

var File_api_rule_v1_dto_rule_proto protoreflect.FileDescriptor

var file_api_rule_v1_dto_rule_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x74,
	0x6f, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e,
	0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4,
	0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x64, 0x65,
	0x73, 0x63, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x31, 0x20,
	0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x2c, 0x20, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x32, 0x20, 0xe6, 0x97, 0xb6, 0xe5, 0xba, 0x8f, 0xe8, 0xb7, 0xaf,
	0xe7, 0x94, 0xb1, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a,
	0x32, 0x08, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x69, 0x64, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xa8,
	0xa1, 0xe6, 0x9d, 0xbf, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xba, 0x03, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94,
	0xb1, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7,
	0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x8f, 0x8f,
	0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x31, 0x20, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe8, 0xb7, 0xaf,
	0xe7, 0x94, 0xb1, 0x2c, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x32, 0x20, 0xe6, 0x97,
	0xb6, 0xe5, 0xba, 0x8f, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x20, 0x31, 0x20,
	0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xad, 0x2c, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80,
	0x81, 0x20, 0x30, 0x20, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b,
	0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6,
	0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe6,
	0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0x69, 0x64, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d,
	0xbf, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xdc, 0x04, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7,
	0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06,
	0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x45, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32,
	0x2c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x31, 0x20, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf,
	0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x2c, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x32,
	0x20, 0xe6, 0x97, 0xb6, 0xe5, 0xba, 0x8f, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81,
	0x20, 0x31, 0x20, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xad, 0x2c, 0x20, 0xe7, 0x8a,
	0xb6, 0xe6, 0x80, 0x81, 0x20, 0x30, 0x20, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e,
	0x32, 0x0c, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe8, 0xae,
	0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0x92, 0x41, 0x14, 0x32, 0x12, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x9b,
	0xae, 0xe6, 0xa0, 0x87, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x75, 0x62,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e,
	0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe8, 0xae, 0xa2, 0xe9, 0x98, 0x85, 0x69, 0x64, 0x52, 0x05,
	0x73, 0x75, 0x62, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe6, 0xa8,
	0xa1, 0xe6, 0x9d, 0xbf, 0x69, 0x64, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf,
	0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x70, 0x0a, 0x0d, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf, 0xb0, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x22, 0xba, 0x03, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x8f, 0x8f, 0xe8, 0xbf,
	0xb0, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x20, 0x31, 0x20, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe8, 0xb7, 0xaf, 0xe7, 0x94,
	0xb1, 0x2c, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x32, 0x20, 0xe6, 0x97, 0xb6, 0xe5,
	0xba, 0x8f, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28,
	0x92, 0x41, 0x25, 0x32, 0x23, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x20, 0x31, 0x20, 0xe8, 0xbf,
	0x90, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xad, 0x2c, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x20,
	0x30, 0x20, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x30, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb,
	0xba, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x9b, 0xb4,
	0xe6, 0x96, 0xb0, 0xe6, 0x97, 0xb6, 0xe9, 0x97, 0xb4, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0x69, 0x64, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x30,
	0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xa8, 0xa1, 0xe6, 0x9d, 0xbf, 0xe5,
	0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x22, 0x2e, 0x0a, 0x0d, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92,
	0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2b, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xdf, 0x04,
	0x0a, 0x0c, 0x52, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x12, 0x29,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0e, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xe0, 0x41,
	0x02, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9,
	0x87, 0x8f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14,
	0xe0, 0x41, 0x01, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5, 0xad,
	0x97, 0xe6, 0xae, 0xb5, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x33, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x0e, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0x80,
	0x92, 0xe5, 0xba, 0x8f, 0x52, 0x0c, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x09, 0x6b, 0x65, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe5,
	0x85, 0xb3, 0xe9, 0x94, 0xae, 0xe5, 0xad, 0x97, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe5, 0x85, 0xb3, 0xe9, 0x94, 0xae, 0xe5, 0xad, 0x97, 0xe5, 0x80, 0xbc, 0x52, 0x09, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7,
	0x94, 0xb1, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x09, 0x42, 0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0xe8, 0xb7, 0xaf, 0xe7,
	0x94, 0xb1, 0x20, 0x69, 0x64, 0x20, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x03, 0x69, 0x64,
	0x73, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x31, 0x92, 0x41, 0x2e, 0x32, 0x2c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20,
	0x31, 0x20, 0xe6, 0xb6, 0x88, 0xe6, 0x81, 0xaf, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x2c, 0x20,
	0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x32, 0x20, 0xe6, 0x97, 0xb6, 0xe5, 0xba, 0x8f, 0xe8,
	0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x52, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x28, 0x92,
	0x41, 0x25, 0x32, 0x23, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x20, 0x31, 0x20, 0xe8, 0xbf, 0x90,
	0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xad, 0x2c, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x20, 0x30,
	0x20, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xfd, 0x01, 0x0a, 0x0d, 0x52, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0e, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xe0, 0x41, 0x02, 0x92, 0x41,
	0x08, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe4,
	0xb8, 0x8a, 0xe4, 0xb8, 0x80, 0xe9, 0xa1, 0xb5, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6,
	0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x42, 0x14, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xb7, 0xaf,
	0xe7, 0x94, 0xb1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x76, 0x0a, 0x13, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69,
	0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28, 0x92, 0x41, 0x25, 0x32, 0x23, 0xe7, 0x8a, 0xb6, 0xe6,
	0x80, 0x81, 0x20, 0x31, 0x20, 0xe8, 0xbf, 0x90, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xad, 0x2c, 0x20,
	0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x20, 0x30, 0x20, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x77, 0x0a, 0x14, 0x52, 0x75, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a,
	0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x40,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x28,
	0x92, 0x41, 0x25, 0x32, 0x23, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x20, 0x31, 0x20, 0xe8, 0xbf,
	0x90, 0xe8, 0xa1, 0x8c, 0xe4, 0xb8, 0xad, 0x2c, 0x20, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x20,
	0x30, 0x20, 0xe5, 0x81, 0x9c, 0xe6, 0xad, 0xa2, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0x31, 0x0a, 0x10, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49,
	0x44, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x4f, 0x0a, 0x11, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x12, 0x3a, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x19, 0x92,
	0x41, 0x16, 0x32, 0x14, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0x69, 0x64, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x49, 0x64, 0x73, 0x22, 0xd8, 0x02, 0x0a, 0x0e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xe0, 0x41, 0x02, 0x92, 0x41,
	0x08, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81, 0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e,
	0x75, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6,
	0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x33, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0e, 0xe0,
	0x41, 0x01, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0x80, 0x92, 0xe5, 0xba, 0x8f, 0x52, 0x0c, 0x69,
	0x73, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x09, 0x6b,
	0x65, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11,
	0xe0, 0x41, 0x01, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe5, 0x85, 0xb3, 0xe9, 0x94, 0xae, 0xe5, 0xad,
	0x97, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a, 0x0a, 0x73,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85, 0xb3, 0xe9, 0x94, 0xae, 0xe5,
	0xad, 0x97, 0xe5, 0x80, 0xbc, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b, 0x65, 0x79,
	0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41,
	0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x81, 0x02, 0x0a, 0x0f, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0e, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe6, 0x80, 0xbb, 0xe6,
	0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xe0, 0x41, 0x02,
	0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x0b, 0x32,
	0x09, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x80, 0xe9, 0xa1, 0xb5, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3a, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x42, 0x14, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x6a, 0x0a, 0x13, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x54, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf,
	0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13,
	0x92, 0x41, 0x10, 0x32, 0x0e, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x69, 0x64, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x64, 0x73, 0x22,
	0x6f, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7,
	0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x0b, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x69, 0x64, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x64, 0x73,
	0x22, 0x3b, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32,
	0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0xd7, 0x01,
	0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe6, 0xa8, 0xa1,
	0xe6, 0x9d, 0xbf, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x0a,
	0x0a, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0xbb,
	0x84, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xe1, 0x04, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a,
	0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41,
	0x28, 0x32, 0x26, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x31, 0x20, 0x4b, 0x61, 0x66, 0x6b,
	0x61, 0x2c, 0x20, 0xe4, 0xbb, 0x85, 0x20, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92,
	0x41, 0x28, 0x32, 0x26, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80,
	0xef, 0xbc, 0x8c, 0x20, 0xe4, 0xbb, 0x85, 0x20, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0xef, 0xbc, 0x8c, 0x20, 0xe4, 0xbb, 0x85, 0x20, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe7,
	0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2a, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe8, 0xa1, 0xa8,
	0xe5, 0x90, 0x8d, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x20, 0xe6, 0x88,
	0x96, 0xe8, 0x80, 0x85, 0x20, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52,
	0x08, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x69, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32,
	0x1a, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x90, 0x8e,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0x69, 0x64, 0x52, 0x06, 0x73, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x4d,
	0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x98,
	0xa0, 0xe5, 0xb0, 0x84, 0xe8, 0xa1, 0xa8, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x51, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x2e, 0x54, 0x61, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x87, 0xaa,
	0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9a, 0x06, 0x0a, 0x14,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x23, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x9b, 0xae,
	0xe6, 0xa0, 0x87, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x20, 0x31, 0x20, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x2c, 0x20, 0xe4, 0xbb,
	0x85, 0x20, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x68, 0x6f,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x20, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xef, 0xbc, 0x8c, 0x20, 0xe4,
	0xbb, 0x85, 0x20, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4,
	0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32,
	0x25, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0xef, 0xbc, 0x8c, 0x20,
	0xe4, 0xbb, 0x85, 0x20, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe8, 0xa1, 0xa8, 0xe5, 0x90, 0x8d, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x69, 0x6e,
	0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0x92, 0x41,
	0x19, 0x32, 0x17, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x20, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0x20,
	0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x08, 0x73, 0x69, 0x6e, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe9, 0xaa, 0x8c, 0xe8,
	0xaf, 0x81, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b,
	0x9e, 0xe7, 0x9a, 0x84, 0x69, 0x64, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x3a,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x98, 0xa0, 0xe5, 0xb0, 0x84, 0xe8,
	0xa1, 0xa8, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe7,
	0x94, 0xa8, 0xe6, 0x88, 0xb7, 0xe5, 0x90, 0x8d, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x27,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0xaf, 0x86, 0xe7, 0xa0, 0x81, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xba, 0x93, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0xe7, 0x9b, 0xae, 0xe6,
	0xa0, 0x87, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xe5, 0xad, 0x97, 0xe7, 0xac, 0xa6, 0xe4, 0xb8,
	0xb2, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x52, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a,
	0xe4, 0xb9, 0x89, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a,
	0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xe4, 0x03, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41,
	0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x2a, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x69,
	0x64, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xef, 0xbc, 0x8c, 0x20,
	0xe4, 0xbb, 0x85, 0x20, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27,
	0x32, 0x25, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0xef, 0xbc, 0x8c,
	0x20, 0xe4, 0xbb, 0x85, 0x20, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e,
	0x8b, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x20, 0xe6, 0x88,
	0x96, 0xe8, 0x80, 0x85, 0x20, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52,
	0x08, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x69, 0x6e,
	0x6b, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32,
	0x1a, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x90, 0x8e,
	0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0x69, 0x64, 0x52, 0x06, 0x73, 0x69, 0x6e,
	0x6b, 0x49, 0x64, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32,
	0x0f, 0xe8, 0x87, 0xaa, 0xe5, 0xae, 0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb7, 0x04, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94,
	0xb1, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0xe7, 0xb1, 0xbb, 0xe5,
	0x9e, 0x8b, 0x20, 0x31, 0x20, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x2c, 0x20, 0xe4, 0xbb, 0x85, 0x20,
	0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xbd, 0xbf, 0xe7,
	0x94, 0xa8, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2b, 0x92, 0x41, 0x28, 0x32, 0x26, 0x6b, 0x61, 0x66,
	0x6b, 0x61, 0x20, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0xef, 0xbc, 0x8c, 0x20, 0xe4, 0xbb, 0x85,
	0x20, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xbd, 0xbf,
	0xe7, 0x94, 0xa8, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2a, 0x92, 0x41, 0x27, 0x32, 0x25, 0x6b,
	0x61, 0x66, 0x6b, 0x61, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0xef, 0xbc, 0x8c, 0x20, 0xe4, 0xbb,
	0x85, 0x20, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0x20, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe4, 0xbd,
	0xbf, 0xe7, 0x94, 0xa8, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x73,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0x92, 0x41, 0x19, 0x32, 0x17, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x20, 0xe6, 0x88, 0x96, 0xe8, 0x80,
	0x85, 0x20, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x08, 0x73, 0x69,
	0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe9, 0xaa,
	0x8c, 0xe8, 0xaf, 0x81, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x94,
	0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0x69, 0x64, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x6b, 0x49, 0x64,
	0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x98, 0xa0, 0xe5, 0xb0,
	0x84, 0xe8, 0xa1, 0xa8, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x52, 0x0a, 0x04,
	0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe8, 0x87, 0xaa, 0xe5, 0xae,
	0x9a, 0xe4, 0xb9, 0x89, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x70, 0x0a, 0x15, 0x54, 0x65, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x4b, 0x61, 0x66, 0x6b, 0x61, 0x52,
	0x65, 0x71, 0x12, 0x32, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1e, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x18, 0x32, 0x16, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0xe5,
	0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x2c, 0x20, 0x27, 0x2c, 0x27, 0xe5, 0x88, 0x86, 0xe5, 0x89, 0xb2,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x07, 0x32, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0xce, 0x02, 0x0a, 0x0b,
	0x41, 0x53, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x12, 0x4c, 0x0a, 0x09, 0x73,
	0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f,
	0xe0, 0x41, 0x02, 0x92, 0x41, 0x29, 0x32, 0x27, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0xef, 0xbc, 0x8c, 0x20, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x20, 0xe6, 0x88, 0x96, 0xe8, 0x80, 0x85, 0x20, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x52,
	0x08, 0x73, 0x69, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x75, 0x72, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe8, 0xbf, 0x9e, 0xe6, 0x8e, 0xa5, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x52, 0x04, 0x75,
	0x72, 0x6c, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x58, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x52, 0x32, 0x50, 0x6d, 0x65, 0x74,
	0x61, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xe5, 0x82, 0xa8, 0xe5, 0xad, 0x98, 0xe4, 0xb8, 0x8d,
	0xe5, 0x90, 0x8c, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0xe7, 0x9a, 0x84, 0xe7, 0x89, 0xb9, 0xe6,
	0x9c, 0x89, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xef, 0xbc, 0x8c, 0xe5, 0xa6, 0x82, 0x63, 0x68,
	0x72, 0x6f, 0x6e, 0x75, 0x73, 0xe9, 0x9c, 0x80, 0xe8, 0xa6, 0x81, 0x75, 0x73, 0x65, 0x72, 0xef,
	0xbc, 0x8c, 0xe5, 0x92, 0x8c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x0c,
	0x41, 0x53, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1d, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe9,
	0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x20, 0x92, 0x41, 0x1d, 0x32,
	0x1b, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe6, 0x94, 0xaf, 0xe6, 0x8c, 0x81, 0xe7, 0x9a, 0x84,
	0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x52, 0x05, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x22, 0xdb, 0x02, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xe0, 0x41, 0x02,
	0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81, 0x52, 0x07, 0x70, 0x61, 0x67,
	0x65, 0x4e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x0e, 0x32,
	0x0c, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xe0, 0x41, 0x01, 0x92, 0x41,
	0x0e, 0x32, 0x0c, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x33, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x64,
	0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42,
	0x0e, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe5, 0x80, 0x92, 0xe5, 0xba, 0x8f, 0x52,
	0x0c, 0x69, 0x73, 0x44, 0x65, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a,
	0x09, 0x6b, 0x65, 0x79, 0x5f, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe5, 0x85, 0xb3, 0xe9, 0x94, 0xae,
	0xe5, 0xad, 0x97, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x57, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x33, 0x0a,
	0x0a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0xe0, 0x41, 0x01, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0x85, 0xb3, 0xe9, 0x94,
	0xae, 0xe5, 0xad, 0x97, 0xe5, 0x80, 0xbc, 0x52, 0x09, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4b,
	0x65, 0x79, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0d,
	0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x98, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x24, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0e, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x08, 0x32,
	0x06, 0xe6, 0x80, 0xbb, 0xe6, 0x95, 0xb0, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x29,
	0x0a, 0x08, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x42, 0x0e, 0xe0, 0x41, 0x02, 0x92, 0x41, 0x08, 0x32, 0x06, 0xe9, 0xa1, 0xb5, 0xe7, 0xa0, 0x81,
	0x52, 0x07, 0x70, 0x61, 0x67, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xe0, 0x41,
	0x02, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe4, 0xb8, 0x8a, 0xe4, 0xb8, 0x80, 0xe9, 0xa1, 0xb5, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x67, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x14, 0xe0, 0x41,
	0x02, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xaf, 0x8f, 0xe9, 0xa1, 0xb5, 0xe6, 0x95, 0xb0, 0xe9,
	0x87, 0x8f, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4e, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x1a, 0xe0, 0x41, 0x02, 0x92,
	0x41, 0x14, 0x32, 0x12, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x66, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe8, 0xb7, 0xaf, 0xe7,
	0x94, 0xb1, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x69, 0x64, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x0f, 0x45, 0x72, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1,
	0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41,
	0x10, 0x32, 0x0e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xae, 0xa2, 0xe9, 0x98, 0x85, 0x69,
	0x64, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x22, 0x6e,
	0x0a, 0x15, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x72, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x42, 0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1,
	0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41,
	0x10, 0x32, 0x0e, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xae, 0xa2, 0xe9, 0x98, 0x85, 0x69,
	0x64, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x49, 0x64, 0x22, 0x32,
	0x0a, 0x11, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x0d, 0x92, 0x41, 0x0a, 0x32, 0x08, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x69, 0x64, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x7f, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c,
	0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe7, 0xb1, 0xbb,
	0xe5, 0x9e, 0x8b, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x73, 0x50,
	0x4b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x98,
	0xaf, 0xe5, 0x90, 0xa6, 0xe4, 0xb8, 0xba, 0xe4, 0xb8, 0xbb, 0xe9, 0x94, 0xae, 0x52, 0x04, 0x69,
	0x73, 0x50, 0x4b, 0x22, 0x61, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0x92, 0x41, 0x08, 0x32,
	0x06, 0xe8, 0xa1, 0xa8, 0xe5, 0x90, 0x8d, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0e,
	0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8, 0xa1, 0xa8, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x08, 0x4d, 0x61, 0x70, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0xe6, 0xa8, 0xa1, 0xe6,
	0x9d, 0xbf, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x06, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x38, 0x0a, 0x07, 0x6d, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe8, 0xa1, 0xa8, 0xe5, 0xad, 0x97, 0xe6,
	0xae, 0xb5, 0x52, 0x06, 0x6d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x41, 0x0a, 0x0e, 0x41, 0x53,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe9,
	0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x90, 0x8e, 0xe8, 0xbf,
	0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x50, 0x0a,
	0x0f, 0x41, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x3d, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xa1,
	0xa8, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x22,
	0x78, 0x0a, 0x10, 0x41, 0x53, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70,
	0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe6, 0x88, 0x90, 0xe5,
	0x8a, 0x9f, 0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0x69, 0x64,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6,
	0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xa1, 0xa8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x41, 0x53,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c,
	0x32, 0x1a, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x90,
	0x8e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x33, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe8, 0xa1, 0xa8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x17, 0x92, 0x41,
	0x14, 0x32, 0x12, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe5, 0xba, 0x93, 0xe8, 0xa1, 0xa8, 0xe5,
	0xad, 0x97, 0xe6, 0xae, 0xb5, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x6d, 0x61, 0x70, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32,
	0x09, 0xe6, 0x98, 0xa0, 0xe5, 0xb0, 0x84, 0xe8, 0xa1, 0xa8, 0x52, 0x09, 0x6d, 0x61, 0x70, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x13, 0x41, 0x53, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a,
	0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x90, 0x8e, 0xe8,
	0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x9b,
	0xae, 0xe6, 0xa0, 0x87, 0x69, 0x64, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x95, 0xb0, 0xe6, 0x8d,
	0xae, 0xe8, 0xa1, 0xa8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x2e, 0x4d, 0x61, 0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09,
	0xe6, 0x98, 0xa0, 0xe5, 0xb0, 0x84, 0xe8, 0xa1, 0xa8, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x41, 0x53, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe9, 0xaa, 0x8c,
	0xe8, 0xaf, 0x81, 0xe6, 0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x94, 0xe5,
	0x9b, 0x9e, 0xe7, 0x9a, 0x84, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x09, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13,
	0x92, 0x41, 0x10, 0x32, 0x0e, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x9b, 0xae, 0xe6, 0xa0,
	0x87, 0x69, 0x64, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0f, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xa1,
	0xa8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x4d, 0x61,
	0x70, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x98, 0xa0,
	0xe5, 0xb0, 0x84, 0xe8, 0xa1, 0xa8, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x7c,
	0x0a, 0x14, 0x41, 0x53, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x12, 0x2f, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf, 0x81, 0xe6,
	0x88, 0x90, 0xe5, 0x8a, 0x9f, 0xe5, 0x90, 0x8e, 0xe8, 0xbf, 0x94, 0xe5, 0x9b, 0x9e, 0xe7, 0x9a,
	0x84, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0x92, 0x41, 0x11,
	0x32, 0x0f, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xa1, 0xa8, 0xe5, 0x90, 0x8d, 0xe7, 0xa7,
	0xb0, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4e, 0x0a, 0x15,
	0x41, 0x53, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x35, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe8, 0xa1, 0xa8, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x9e, 0x1f, 0x0a,
	0x05, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x18,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b,
	0x22, 0x06, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x2d, 0x0a, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x0c, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xb7, 0xaf, 0xe7,
	0x94, 0xb1, 0x2a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4a, 0x0b,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x87, 0x01, 0x0a, 0x0a,
	0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x46, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x1a, 0x0b, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x2d, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0c,
	0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x2a, 0x0a, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x82, 0x01, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e,
	0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x2a, 0x0b, 0x2f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x2d, 0x0a, 0x04, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x0c, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xb7, 0xaf, 0xe7, 0x94,
	0xb1, 0x2a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x4a, 0x0b, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x77, 0x0a, 0x07, 0x52, 0x75,
	0x6c, 0x65, 0x47, 0x65, 0x74, 0x12, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x2e, 0x52, 0x75, 0x6c, 0x65, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x22, 0x46, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x92, 0x41, 0x30, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x2a, 0x07, 0x47,
	0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a,
	0x02, 0x4f, 0x4b, 0x12, 0x81, 0x01, 0x0a, 0x09, 0x52, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x08, 0x12, 0x06, 0x2f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x92, 0x41, 0x32, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2a,
	0x09, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x75, 0x6c, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xb4, 0x01, 0x0a, 0x10, 0x52, 0x75, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x22, 0x61, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x1a, 0x1a, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x2f, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0x39, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0xe5, 0x88, 0x87,
	0xe6, 0x8d, 0xa2, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x8a, 0xb6, 0xe6, 0x80, 0x81, 0x2a,
	0x10, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xb8,
	0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x49, 0x44, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x44, 0x52, 0x65, 0x71, 0x1a,
	0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x92, 0x41, 0x44, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0x69, 0x64, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2a, 0x10, 0x47, 0x65, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x49, 0x44, 0x4a, 0x0b, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xa8, 0x01, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x5d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3c, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x15,
	0xe6, 0xb7, 0xbb, 0xe5, 0x8a, 0xa0, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe5, 0x88, 0xb0, 0xe8,
	0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x2a, 0x10, 0x41, 0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x54, 0x6f, 0x52, 0x75, 0x6c, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04,
	0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xbd, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x68, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x15, 0x2a, 0x13, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x92, 0x41, 0x4a, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x1e, 0xe4, 0xbb, 0x8e, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe8, 0xae, 0xbe, 0xe5, 0xa4,
	0x87, 0xe4, 0xb8, 0xad, 0xe5, 0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87,
	0x2a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x52, 0x75, 0x6c, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04,
	0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xc6, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x6d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x2a, 0x0d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x55, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x27,
	0xe4, 0xbb, 0x8e, 0xe6, 0x89, 0x80, 0xe6, 0x9c, 0x89, 0xe7, 0x9a, 0x84, 0xe8, 0xb7, 0xaf, 0xe7,
	0x94, 0xb1, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0xe4, 0xb8, 0xad, 0xe5, 0x88, 0xa0, 0xe9, 0x99,
	0xa4, 0xe8, 0xae, 0xbe, 0xe5, 0xa4, 0x87, 0x2a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x52, 0x75, 0x6c, 0x65,
	0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xa5, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f,
	0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x92, 0x41, 0x40, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0xe6, 0x9f, 0xa5,
	0xe8, 0xaf, 0xa2, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x9a, 0x84, 0xe8, 0xae, 0xbe, 0xe5,
	0xa4, 0x87, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12,
	0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xb2, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x22, 0x12, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3f, 0x0a, 0x04, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x18, 0xe5, 0x88, 0x9b, 0xe5, 0xbb, 0xba, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe8,
	0xbd, 0xac, 0xe5, 0x8f, 0x91, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x2a, 0x10, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4a, 0x0b, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xbe, 0x01, 0x0a, 0x10, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1e,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6b,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x1a, 0x1e, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b,
	0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x7d, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3f, 0x0a, 0x04, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x18, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1,
	0xe8, 0xbd, 0xac, 0xe5, 0x8f, 0x91, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0x2a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4a, 0x0b,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xa2, 0x01, 0x0a, 0x12,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x4b, 0x61, 0x66,
	0x6b, 0x61, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x4b, 0x61, 0x66, 0x6b, 0x61,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x53, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x2f, 0x6b, 0x61,
	0x66, 0x6b, 0x61, 0x92, 0x41, 0x3a, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x11, 0xe6, 0xb5,
	0x8b, 0xe8, 0xaf, 0x95, 0x6b, 0x61, 0x66, 0x6b, 0x61, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x2a,
	0x12, 0x54, 0x65, 0x73, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x6f, 0x4b, 0x61,
	0x66, 0x6b, 0x61, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b,
	0x12, 0x95, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x12, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x2f, 0x7b, 0x73, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x7d, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x35, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0xe9, 0xaa, 0x8c, 0xe8, 0xaf,
	0x81, 0xe8, 0xbd, 0xac, 0xe5, 0x8f, 0x91, 0xe9, 0x85, 0x8d, 0xe7, 0xbd, 0xae, 0x2a, 0x0c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x4a, 0x0b, 0x0a, 0x03, 0x32,
	0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x93, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x2e, 0x41, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x51, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x92, 0x41, 0x35, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae, 0xe8, 0xa1, 0xa8,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x2a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xb8,
	0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x64, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x73, 0x69,
	0x6e, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x2f, 0x7b,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x3b, 0x0a, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x15, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe8, 0xa1, 0xa8, 0xe8, 0xaf, 0xa6, 0xe6, 0x83, 0x85, 0x2a, 0x0f, 0x47, 0x65, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x4a, 0x0b, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0x9f, 0x01, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x2e, 0x41, 0x53, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x57, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x73, 0x69, 0x6e,
	0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x6d, 0x61, 0x70, 0x73, 0x92, 0x41, 0x3d, 0x0a, 0x04,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x1b, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf, 0xa2, 0xe6, 0x95, 0xb0, 0xe6,
	0x8d, 0xae, 0xe8, 0xa1, 0xa8, 0xe7, 0xbb, 0x93, 0xe6, 0x9e, 0x84, 0xe6, 0x98, 0xa0, 0xe5, 0xb0,
	0x84, 0x2a, 0x0b, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x4a, 0x0b,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xa8, 0x01, 0x0a, 0x0e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x41, 0x53, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x52, 0x65, 0x73, 0x70, 0x22, 0x57, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x14, 0x1a, 0x0f, 0x2f, 0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x6d, 0x61, 0x70, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x3a, 0x0a, 0x04, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x15, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe6, 0x95, 0xb0, 0xe6, 0x8d, 0xae,
	0xe8, 0xa1, 0xa8, 0xe6, 0x98, 0xa0, 0xe5, 0xb0, 0x84, 0x2a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xa7, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x75, 0x6c, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c,
	0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x5a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x12, 0x12, 0x2f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x92, 0x41, 0x3d, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0xe6, 0x9f, 0xa5, 0xe8, 0xaf,
	0xa2, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x9b, 0xae, 0xe6, 0xa0, 0x87, 0xe5, 0x88, 0x97,
	0xe8, 0xa1, 0xa8, 0x2a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b,
	0x12, 0xad, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x62, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x20, 0x2a, 0x1e, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x7d, 0x2f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x2f, 0x7b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x39, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0xe5,
	0x88, 0xa0, 0xe9, 0x99, 0xa4, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x9b, 0xae, 0xe6, 0xa0,
	0x87, 0x2a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b,
	0x12, 0xa1, 0x01, 0x0a, 0x0c, 0x45, 0x72, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x45, 0x72, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x5e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x22, 0x1b, 0x2f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x35, 0x0a,
	0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0xe9, 0x94, 0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1,
	0xe6, 0x81, 0xaf, 0xe8, 0xae, 0xa2, 0xe9, 0x98, 0x85, 0x2a, 0x0c, 0x45, 0x72, 0x72, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04,
	0x0a, 0x02, 0x4f, 0x4b, 0x12, 0xb9, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45,
	0x72, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x72, 0x72,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x6a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x1a, 0x1b, 0x2f, 0x72,
	0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x41, 0x0a,
	0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0xe6, 0x94, 0xb9, 0xe5, 0x8f, 0x98, 0xe9, 0x94, 0x99,
	0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xae, 0xa2, 0xe9, 0x98, 0x85, 0x2a,
	0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x72, 0x72, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b,
	0x12, 0xaa, 0x01, 0x0a, 0x0e, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x63, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d,
	0x2a, 0x1b, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x2f, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x92, 0x41, 0x3d,
	0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x18, 0xe5, 0x8f, 0x96, 0xe6, 0xb6, 0x88, 0xe9, 0x94,
	0x99, 0xe8, 0xaf, 0xaf, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0xe8, 0xae, 0xa2, 0xe9, 0x98, 0x85,
	0x2a, 0x0e, 0x45, 0x72, 0x72, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x4a, 0x0b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x04, 0x0a, 0x02, 0x4f, 0x4b, 0x42, 0x3d, 0x0a,
	0x08, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x75, 0x6c, 0x65, 0x50, 0x01, 0x5a, 0x2f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x6b, 0x65, 0x65, 0x6c, 0x2d, 0x69, 0x6f,
	0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2d, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_rule_v1_dto_rule_proto_rawDescOnce sync.Once
	file_api_rule_v1_dto_rule_proto_rawDescData = file_api_rule_v1_dto_rule_proto_rawDesc
)

func file_api_rule_v1_dto_rule_proto_rawDescGZIP() []byte {
	file_api_rule_v1_dto_rule_proto_rawDescOnce.Do(func() {
		file_api_rule_v1_dto_rule_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_rule_v1_dto_rule_proto_rawDescData)
	})
	return file_api_rule_v1_dto_rule_proto_rawDescData
}

var file_api_rule_v1_dto_rule_proto_msgTypes = make([]protoimpl.MessageInfo, 48)
var file_api_rule_v1_dto_rule_proto_goTypes = []interface{}{
	(*RuleCreateReq)(nil),              // 0: api.rule.RuleCreateReq
	(*RuleCreateResp)(nil),             // 1: api.rule.RuleCreateResp
	(*Rule)(nil),                       // 2: api.rule.Rule
	(*RuleUpdateReq)(nil),              // 3: api.rule.RuleUpdateReq
	(*RuleUpdateResp)(nil),             // 4: api.rule.RuleUpdateResp
	(*RuleDeleteReq)(nil),              // 5: api.rule.RuleDeleteReq
	(*RuleGetReq)(nil),                 // 6: api.rule.RuleGetReq
	(*RuleQueryReq)(nil),               // 7: api.rule.RuleQueryReq
	(*RuleQueryResp)(nil),              // 8: api.rule.RuleQueryResp
	(*RuleStatusSwitchReq)(nil),        // 9: api.rule.RuleStatusSwitchReq
	(*RuleStatusSwitchResp)(nil),       // 10: api.rule.RuleStatusSwitchResp
	(*RuleDevicesIDReq)(nil),           // 11: api.rule.RuleDevicesIDReq
	(*RuleDevicesIDResp)(nil),          // 12: api.rule.RuleDevicesIDResp
	(*RuleDevicesReq)(nil),             // 13: api.rule.RuleDevicesReq
	(*RuleDevicesResp)(nil),            // 14: api.rule.RuleDevicesResp
	(*AddDevicesToRuleReq)(nil),        // 15: api.rule.AddDevicesToRuleReq
	(*RemoveDevicesFromRuleReq)(nil),   // 16: api.rule.RemoveDevicesFromRuleReq
	(*RemoveDeviceFromAllRuleReq)(nil), // 17: api.rule.RemoveDeviceFromAllRuleReq
	(*Device)(nil),                     // 18: api.rule.Device
	(*CreateRuleTargetReq)(nil),        // 19: api.rule.CreateRuleTargetReq
	(*CreateRuleTargetResp)(nil),       // 20: api.rule.CreateRuleTargetResp
	(*UpdateRuleTargetReq)(nil),        // 21: api.rule.UpdateRuleTargetReq
	(*UpdateRuleTargetResp)(nil),       // 22: api.rule.UpdateRuleTargetResp
	(*TestConnectToKafkaReq)(nil),      // 23: api.rule.TestConnectToKafkaReq
	(*ASVerifyReq)(nil),                // 24: api.rule.ASVerifyReq
	(*ASVerifyResp)(nil),               // 25: api.rule.ASVerifyResp
	(*ListRuleTargetReq)(nil),          // 26: api.rule.ListRuleTargetReq
	(*ListRuleTargetResp)(nil),         // 27: api.rule.ListRuleTargetResp
	(*DeleteRuleTargetReq)(nil),        // 28: api.rule.DeleteRuleTargetReq
	(*ErrSubscribeReq)(nil),            // 29: api.rule.ErrSubscribeReq
	(*ChangeErrSubscribeReq)(nil),      // 30: api.rule.ChangeErrSubscribeReq
	(*ErrUnsubscribeReq)(nil),          // 31: api.rule.ErrUnsubscribeReq
	(*Field)(nil),                      // 32: api.rule.Field
	(*Table)(nil),                      // 33: api.rule.Table
	(*MapField)(nil),                   // 34: api.rule.MapField
	(*ASTableListReq)(nil),             // 35: api.rule.ASTableListReq
	(*ASTableListResp)(nil),            // 36: api.rule.ASTableListResp
	(*ASGetTableMapReq)(nil),           // 37: api.rule.ASGetTableMapReq
	(*ASGetTableMapResp)(nil),          // 38: api.rule.ASGetTableMapResp
	(*ASUpdateTableMapReq)(nil),        // 39: api.rule.ASUpdateTableMapReq
	(*ASUpdateTableMapResp)(nil),       // 40: api.rule.ASUpdateTableMapResp
	(*ASGetTableDetailsReq)(nil),       // 41: api.rule.ASGetTableDetailsReq
	(*ASGetTableDetailsResp)(nil),      // 42: api.rule.ASGetTableDetailsResp
	nil,                                // 43: api.rule.CreateRuleTargetReq.TagsEntry
	nil,                                // 44: api.rule.CreateRuleTargetResp.TagsEntry
	nil,                                // 45: api.rule.UpdateRuleTargetReq.TagsEntry
	nil,                                // 46: api.rule.UpdateRuleTargetResp.TagsEntry
	nil,                                // 47: api.rule.ASVerifyReq.MetaEntry
	(*Uint64)(nil),                     // 48: api.rule.Uint64
	(*String)(nil),                     // 49: api.rule.String
	(*Uint32)(nil),                     // 50: api.rule.Uint32
	(*emptypb.Empty)(nil),              // 51: google.protobuf.Empty
}
var file_api_rule_v1_dto_rule_proto_depIdxs = []int32{
	48, // 0: api.rule.RuleQueryReq.id:type_name -> api.rule.Uint64
	49, // 1: api.rule.RuleQueryReq.name:type_name -> api.rule.String
	50, // 2: api.rule.RuleQueryReq.status:type_name -> api.rule.Uint32
	2,  // 3: api.rule.RuleQueryResp.data:type_name -> api.rule.Rule
	18, // 4: api.rule.RuleDevicesResp.data:type_name -> api.rule.Device
	34, // 5: api.rule.CreateRuleTargetReq.fields:type_name -> api.rule.MapField
	43, // 6: api.rule.CreateRuleTargetReq.tags:type_name -> api.rule.CreateRuleTargetReq.TagsEntry
	34, // 7: api.rule.CreateRuleTargetResp.fields:type_name -> api.rule.MapField
	44, // 8: api.rule.CreateRuleTargetResp.tags:type_name -> api.rule.CreateRuleTargetResp.TagsEntry
	45, // 9: api.rule.UpdateRuleTargetReq.tags:type_name -> api.rule.UpdateRuleTargetReq.TagsEntry
	34, // 10: api.rule.UpdateRuleTargetResp.fields:type_name -> api.rule.MapField
	46, // 11: api.rule.UpdateRuleTargetResp.tags:type_name -> api.rule.UpdateRuleTargetResp.TagsEntry
	47, // 12: api.rule.ASVerifyReq.meta:type_name -> api.rule.ASVerifyReq.MetaEntry
	20, // 13: api.rule.ListRuleTargetResp.data:type_name -> api.rule.CreateRuleTargetResp
	32, // 14: api.rule.Table.fields:type_name -> api.rule.Field
	32, // 15: api.rule.MapField.t_field:type_name -> api.rule.Field
	32, // 16: api.rule.MapField.m_field:type_name -> api.rule.Field
	33, // 17: api.rule.ASTableListResp.tables:type_name -> api.rule.Table
	32, // 18: api.rule.ASGetTableMapResp.table_fields:type_name -> api.rule.Field
	34, // 19: api.rule.ASGetTableMapResp.map_fields:type_name -> api.rule.MapField
	34, // 20: api.rule.ASUpdateTableMapReq.fields:type_name -> api.rule.MapField
	34, // 21: api.rule.ASUpdateTableMapResp.fields:type_name -> api.rule.MapField
	33, // 22: api.rule.ASGetTableDetailsResp.table:type_name -> api.rule.Table
	0,  // 23: api.rule.Rules.RuleCreate:input_type -> api.rule.RuleCreateReq
	3,  // 24: api.rule.Rules.RuleUpdate:input_type -> api.rule.RuleUpdateReq
	5,  // 25: api.rule.Rules.RuleDelete:input_type -> api.rule.RuleDeleteReq
	6,  // 26: api.rule.Rules.RuleGet:input_type -> api.rule.RuleGetReq
	7,  // 27: api.rule.Rules.RuleQuery:input_type -> api.rule.RuleQueryReq
	9,  // 28: api.rule.Rules.RuleStatusSwitch:input_type -> api.rule.RuleStatusSwitchReq
	11, // 29: api.rule.Rules.GetRuleDevicesID:input_type -> api.rule.RuleDevicesIDReq
	15, // 30: api.rule.Rules.AddDevicesToRule:input_type -> api.rule.AddDevicesToRuleReq
	16, // 31: api.rule.Rules.RemoveDevicesFromRule:input_type -> api.rule.RemoveDevicesFromRuleReq
	17, // 32: api.rule.Rules.RemoveDeviceFromAllRule:input_type -> api.rule.RemoveDeviceFromAllRuleReq
	13, // 33: api.rule.Rules.GetRuleDevices:input_type -> api.rule.RuleDevicesReq
	19, // 34: api.rule.Rules.CreateRuleTarget:input_type -> api.rule.CreateRuleTargetReq
	21, // 35: api.rule.Rules.UpdateRuleTarget:input_type -> api.rule.UpdateRuleTargetReq
	23, // 36: api.rule.Rules.TestConnectToKafka:input_type -> api.rule.TestConnectToKafkaReq
	24, // 37: api.rule.Rules.ActionVerify:input_type -> api.rule.ASVerifyReq
	35, // 38: api.rule.Rules.TableList:input_type -> api.rule.ASTableListReq
	41, // 39: api.rule.Rules.GetTableDetails:input_type -> api.rule.ASGetTableDetailsReq
	37, // 40: api.rule.Rules.GetTableMap:input_type -> api.rule.ASGetTableMapReq
	39, // 41: api.rule.Rules.UpdateTableMap:input_type -> api.rule.ASUpdateTableMapReq
	26, // 42: api.rule.Rules.ListRuleTarget:input_type -> api.rule.ListRuleTargetReq
	28, // 43: api.rule.Rules.DeleteRuleTarget:input_type -> api.rule.DeleteRuleTargetReq
	29, // 44: api.rule.Rules.ErrSubscribe:input_type -> api.rule.ErrSubscribeReq
	30, // 45: api.rule.Rules.ChangeErrSubscribe:input_type -> api.rule.ChangeErrSubscribeReq
	31, // 46: api.rule.Rules.ErrUnsubscribe:input_type -> api.rule.ErrUnsubscribeReq
	1,  // 47: api.rule.Rules.RuleCreate:output_type -> api.rule.RuleCreateResp
	4,  // 48: api.rule.Rules.RuleUpdate:output_type -> api.rule.RuleUpdateResp
	51, // 49: api.rule.Rules.RuleDelete:output_type -> google.protobuf.Empty
	2,  // 50: api.rule.Rules.RuleGet:output_type -> api.rule.Rule
	8,  // 51: api.rule.Rules.RuleQuery:output_type -> api.rule.RuleQueryResp
	10, // 52: api.rule.Rules.RuleStatusSwitch:output_type -> api.rule.RuleStatusSwitchResp
	12, // 53: api.rule.Rules.GetRuleDevicesID:output_type -> api.rule.RuleDevicesIDResp
	51, // 54: api.rule.Rules.AddDevicesToRule:output_type -> google.protobuf.Empty
	51, // 55: api.rule.Rules.RemoveDevicesFromRule:output_type -> google.protobuf.Empty
	51, // 56: api.rule.Rules.RemoveDeviceFromAllRule:output_type -> google.protobuf.Empty
	14, // 57: api.rule.Rules.GetRuleDevices:output_type -> api.rule.RuleDevicesResp
	20, // 58: api.rule.Rules.CreateRuleTarget:output_type -> api.rule.CreateRuleTargetResp
	22, // 59: api.rule.Rules.UpdateRuleTarget:output_type -> api.rule.UpdateRuleTargetResp
	51, // 60: api.rule.Rules.TestConnectToKafka:output_type -> google.protobuf.Empty
	25, // 61: api.rule.Rules.ActionVerify:output_type -> api.rule.ASVerifyResp
	36, // 62: api.rule.Rules.TableList:output_type -> api.rule.ASTableListResp
	42, // 63: api.rule.Rules.GetTableDetails:output_type -> api.rule.ASGetTableDetailsResp
	38, // 64: api.rule.Rules.GetTableMap:output_type -> api.rule.ASGetTableMapResp
	40, // 65: api.rule.Rules.UpdateTableMap:output_type -> api.rule.ASUpdateTableMapResp
	27, // 66: api.rule.Rules.ListRuleTarget:output_type -> api.rule.ListRuleTargetResp
	51, // 67: api.rule.Rules.DeleteRuleTarget:output_type -> google.protobuf.Empty
	51, // 68: api.rule.Rules.ErrSubscribe:output_type -> google.protobuf.Empty
	51, // 69: api.rule.Rules.ChangeErrSubscribe:output_type -> google.protobuf.Empty
	51, // 70: api.rule.Rules.ErrUnsubscribe:output_type -> google.protobuf.Empty
	47, // [47:71] is the sub-list for method output_type
	23, // [23:47] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_rule_v1_dto_rule_proto_init() }
func file_api_rule_v1_dto_rule_proto_init() {
	if File_api_rule_v1_dto_rule_proto != nil {
		return
	}
	file_api_rule_v1_wrappers_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_rule_v1_dto_rule_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleCreateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleCreateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleUpdateReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleUpdateResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleDeleteReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleGetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleQueryReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleQueryResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleStatusSwitchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleStatusSwitchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleDevicesIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleDevicesIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleDevicesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuleDevicesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDevicesToRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDevicesFromRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDeviceFromAllRuleReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRuleTargetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRuleTargetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRuleTargetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRuleTargetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestConnectToKafkaReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASVerifyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASVerifyResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRuleTargetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRuleTargetResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRuleTargetReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrSubscribeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeErrSubscribeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrUnsubscribeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTableListReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASTableListResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASGetTableMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASGetTableMapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASUpdateTableMapReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASUpdateTableMapResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASGetTableDetailsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_rule_v1_dto_rule_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ASGetTableDetailsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_rule_v1_dto_rule_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   48,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_rule_v1_dto_rule_proto_goTypes,
		DependencyIndexes: file_api_rule_v1_dto_rule_proto_depIdxs,
		MessageInfos:      file_api_rule_v1_dto_rule_proto_msgTypes,
	}.Build()
	File_api_rule_v1_dto_rule_proto = out.File
	file_api_rule_v1_dto_rule_proto_rawDesc = nil
	file_api_rule_v1_dto_rule_proto_goTypes = nil
	file_api_rule_v1_dto_rule_proto_depIdxs = nil
}
