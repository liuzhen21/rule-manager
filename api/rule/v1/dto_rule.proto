syntax = "proto3";

package api.rule;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "google/api/field_behavior.proto";
import "api/rule/v1/wrappers.proto";

option go_package = "github.com/tkeel-io/rule-manager/api/rule/v1;v1";
option java_multiple_files = true;
option java_package = "api.rule";

// service
service Rules {
  rpc RuleCreate(RuleCreateReq) returns (RuleCreateResp) {
    option (google.api.http) = {
      put : "/rules"
      body : "*"
    };
  };

  rpc RuleUpdate(RuleUpdateReq) returns (RuleUpdateResp) {
    option (google.api.http) = {
      put : "/rules/{id}"
      body : "*"
    };

  };

  rpc RuleDelete(RuleDeleteReq) returns (RuleDeleteResp) {
    option (google.api.http) = {
      delete : "/rules/{id}"
    };
  };

  rpc RuleGet(RuleGetReq) returns (Rule) {
    option (google.api.http) = {
      get : "/rules/{id}"
    };
  };


  rpc RuleQuery(RuleQueryReq) returns (RuleQueryResp) {
    option (google.api.http) = {
      get : "/rules"
    };

  };

  rpc RuleStatus(RuleStatusReq) returns (RuleStatusResp) {
    option (google.api.http) = {
      post : "/rules/{id}/status"
      body : "*"
    };
  };

  rpc RuleStart(RuleStartReq) returns (RuleStartResp) {
    option (google.api.http) = {
      post : "/rules/{id}/start"
      body : "*"
    };
  };

  rpc RuleStop(RuleStopReq) returns (RuleStopResp) {
    option (google.api.http) = {
      post : "/rules/{id}/stop"
      body : "*"
    };
  };

  rpc RuleDebug(RuleDebugReq) returns (RuleDebugResp) {
    option (google.api.http) = {
      post : "/rules/{rule_id}/debug"
      body : "*"
    };

  };

  rpc RuleDebugMessage (RuleDebugMsgReq) returns (RuleDebugMsgResp) {
    option (google.api.http) = {
      get : "/rules/{rule_id}/debug/messages"
    };

  };

  rpc RuleError (RuleErrorReq) returns (RuleErrorResp) {
    option (google.api.http) = {
      get : "/rules/{rule_id}/errors"
    };

  };
}



message SelectField{
  string expr = 1;
  string type = 2;
  string alias = 3;
}


message ConfigStatus {
  bool data_select_flag = 1;
  bool data_dispatch_flag = 2;
  bool data_error_flag = 3;
}

//Rule create.
message RuleCreateReq {
  string user_id = 1;
  string name = 2;
  string desc = 3;
  uint32 type = 4;
}

message RuleCreateResp {
  uint64 id = 1;
  string name = 2;
  string desc = 3;
  uint32 type = 4;
  uint32 status = 5;
  int64 created_at = 6
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "创建时间"}];
  int64 updated_at = 7
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "更新时间"}];
}

message Rule {
  uint64 id = 1;
  string name = 2;
  string desc = 3;
  uint32 type = 4;
  uint32 status = 5;
  int64 created_at = 6
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "创建时间"}];
  int64 updated_at = 7
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "更新时间"}];
}


//rule update
message RuleUpdateReq {
  uint64 id = 1;
  string user_id = 2;
  string name = 3;
  string desc = 4;
}
message RuleUpdateResp {
  uint64 id = 1;
  string name = 2;
  string desc = 3;
  uint32 type = 4;
  uint32 status = 5;
  int64 created_at = 6
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "创建时间"}];
  int64 updated_at = 7
  [(grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {description: "更新时间"}];
}



//rule delete.
message RuleDeleteReq {
  uint64 id = 1;
  string user_id = 2;
}

message RuleDeleteResp {
}

//rule delete.
message RuleGetReq {
  uint64 id = 1;
  string user_id = 2;
}


//rule query
message RuleQueryReq {
  int32 page_num = 1
  [(google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Page number",
    }];
  int32 page_size = 2
  [(google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Page size",
    }];
  string order_by = 3
  [(google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Order by",
    }];
  bool is_descending = 4
  [(google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Is descending",
    }];
  string key_words = 5
  [(google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Key words",
    }];
  string search_key = 6
  [(google.api.field_behavior) = OPTIONAL,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Search Key"
    }];
  Uint64 id = 7;
  repeated string ids = 8;
  String name = 9;
  Uint32 type = 10;
  Uint32 status = 11;

}



message RuleQueryResp {
  uint64 total = 1
  [(google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Total",
    }];
  int32 page_num = 2
  [(google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Page number",
    }];
  uint64 last_page = 3
  [(google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Last page",
    }];
  int32 page_size = 4
  [(google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Page size",
    }];
  repeated Rule data = 5;
}

message RuleStatusReq {
  uint64 id = 1;
  enum StatusOp {
    STATUS_READ = 0;
    STATUS_WRITE = 1;
  }
  StatusOp operator = 2;
  uint32 status = 3;
  string user_id = 4;
}


message RuleStatusResp {
  uint64 id = 1;
  uint32 status = 2;
}

message RuleStartReq {
  uint64 id = 1;
  enum StatusOp {
    STATUS_READ = 0;
    STATUS_WRITE = 1;
  }
  StatusOp operator = 2;
  string status = 3;
  string user_id = 4;
}


message RuleStartResp {
  uint64 id = 1;
  uint32 status = 2;
}

message RuleStopReq {
  uint64 id = 1;
  enum StatusOp {
    STATUS_READ = 0;
    STATUS_WRITE = 1;
  }
  StatusOp operator = 2;
  string status = 3;
  string user_id = 4;
}


message RuleStopResp {
  uint64 id = 1;
  uint32 status = 2;
}


message RuleDebugReq {
  string rule_id = 1;
  string user_id = 2;
  string thing_id = 3;
  string device_id = 4;
  //data type: event|property|+
  string topic_type = 5;
  //data: message.
  bytes data = 6;

}

message RuleDebugResp {
  string rule_id = 1;
  //data: message.
  string topic = 2;
  bytes data = 3;
}


message RuleDebugMsgReq{
  string rule_id = 1;
  string user_id = 2;
  string device_id = 3;
}

message RuleDebugMsgResp{
  string rule_id = 1;
  bytes message = 2;
}



message RuleErrorReq {
  string user_id = 1;
  string rule_id = 2;
}

message RuleErrorResp {
  string rule_id = 1;
  map<string, string> error = 2;
}